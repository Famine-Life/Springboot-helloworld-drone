# drone 本地构建
kind: pipeline
type: docker
name: MyHelloWorld

# drone构建步骤
steps:
  # 1.maven打包
  - name: maven compile
    pull: if-not-exists
    image: maven:ibmjava-alpine
    volumes:
      # maven构建缓存
      - name: cache
        path: /root/.m2
      # 挂载宿主机的目录
      - name: data
        path: /home
    commands:
      # 开始打包maven工程
      - cd springboot-helloworld
      - mvn clean package -Dmaven.test.skip=true
      # 将打包后的文件复制到宿主机映射目录
      - cp target/*.jar /home
      - cp ../Dockerfile /home

  # 2.使用ssh访问主机制作镜像并运行
  - name: ssh commands
    pull: if-not-exists
    image: appleboy/drone-ssh:1.5.7
    settings:
      host: 0.0.0.0
      username: root
      password:
        # 从drone仓库配置中秘密空间读取密码
        from_secret: root     #ssh_password
      port: 22
      script:
        - echo =======暂停容器=======
        - docker stop `docker ps -a | grep springboot-helloworld | awk '{print $1}' `
        - echo =======暂停旧容器和镜像=======
        - docker rm -f `docker ps -a | grep springboot-helloworld | awk '{print $1}' `
        - docker rmi `docker images | grep springboot-helloworld | awk '{print $3}' `
        - echo =======开始构建新镜像=======
        - cd /data/drone/helloDemo
        - docker build -t springboot-helloworld:v1 .
        - echo =======开始部署应用=======
        - docker run -d -p 8080:8080 --name springboot-helloworld springboot-helloworld:v1
        - echo =======清理构建文件=======
        - rm -rf *
        - echo =======部署成功=======

  # 3.钉钉通知
#  - name: dingTalk notification
#    pull: if-not-exists
#    image: guoxudongdocker/drone-dingtalk:latest
#    settings:
#      token:
#        from_secret: dingtalk_token
#      type: markdown
#      message_color: true
#      message_pic: true
#      sha_link: true
#    when:
#      status: [failure, success]

# 挂载的主机卷，可以映射到docker容器中
volumes:
  # maven构建缓存
  - name: cache
    host:
      # path: /tmp/cache/.m2
      path: /var/lib/cache
  # maven构建后与宿主机通信的共享目录
  - name: data
    host:
      path: /data/drone/helloDemo

# drone执行触发器
trigger:
  branch:
    - master
